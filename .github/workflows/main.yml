on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master
      - demo1_implement

name: "Build & Release"

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v3

      # Step 2: Cache Flutter dependencies (to prevent version conflicts)
      - name: Cache Pub dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.pub-cache
            flutter/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      # Step 3: Setup Java environment (Zulu JDK 17)
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '22.0.1'

      # Step 4: Setup Flutter with the stable channel for macOS
      - uses: subosito/flutter-action@v2
        with:
            flutter-version: '3.19.2' # Set to Flutter version 3.19.2
            channel: 'stable'
            architecture: x64

      # Step 5: Run Flutter Pub Get to resolve dependencies
      - name: Install Dependencies
        run: flutter pub get

      # Step 6: Build Android APK (split-per-abi)
      - run: flutter build apk --release --split-per-abi

      # Step 7: Build iOS IPA (without code signing)
      - run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload

      # Step 8: Push artifacts (APK and IPA) to GitHub Releases
      - name: Push to Releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/apk/release/*.apk,
            build/ios/iphoneos/app.ipa
          tag: v1.0.${{ github.run_number }}
          token: ${{ secrets.TOKEN }}
